// Code generated by MockGen. DO NOT EDIT.

package cacheutils

import (
	context "context"
	reflect "reflect"

	go_client "github.com/kubeflow/pipelines/backend/api/v1beta1/go_client"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockTaskServiceClient is a mock of TaskServiceClient interface.
type MockTaskServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockTaskServiceClientMockRecorder
	isgomock struct{}
}

// MockTaskServiceClientMockRecorder is the mock recorder for MockTaskServiceClient.
type MockTaskServiceClientMockRecorder struct {
	mock *MockTaskServiceClient
}

// NewMockTaskServiceClient creates a new mock instance.
func NewMockTaskServiceClient(ctrl *gomock.Controller) *MockTaskServiceClient {
	mock := &MockTaskServiceClient{ctrl: ctrl}
	mock.recorder = &MockTaskServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskServiceClient) EXPECT() *MockTaskServiceClientMockRecorder {
	return m.recorder
}

// CreateTaskV1 mocks base method.
func (m *MockTaskServiceClient) CreateTaskV1(ctx context.Context, in *go_client.CreateTaskRequest, opts ...grpc.CallOption) (*go_client.Task, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTaskV1", varargs...)
	ret0, _ := ret[0].(*go_client.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTaskV1 indicates an expected call of CreateTaskV1.
func (mr *MockTaskServiceClientMockRecorder) CreateTaskV1(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTaskV1", reflect.TypeOf((*MockTaskServiceClient)(nil).CreateTaskV1), varargs...)
}

// ListTasksV1 mocks base method.
func (m *MockTaskServiceClient) ListTasksV1(ctx context.Context, in *go_client.ListTasksRequest, opts ...grpc.CallOption) (*go_client.ListTasksResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTasksV1", varargs...)
	ret0, _ := ret[0].(*go_client.ListTasksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTasksV1 indicates an expected call of ListTasksV1.
func (mr *MockTaskServiceClientMockRecorder) ListTasksV1(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTasksV1", reflect.TypeOf((*MockTaskServiceClient)(nil).ListTasksV1), varargs...)
}

// MockTaskServiceServer is a mock of TaskServiceServer interface.
type MockTaskServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockTaskServiceServerMockRecorder
	isgomock struct{}
}

// MockTaskServiceServerMockRecorder is the mock recorder for MockTaskServiceServer.
type MockTaskServiceServerMockRecorder struct {
	mock *MockTaskServiceServer
}

// NewMockTaskServiceServer creates a new mock instance.
func NewMockTaskServiceServer(ctrl *gomock.Controller) *MockTaskServiceServer {
	mock := &MockTaskServiceServer{ctrl: ctrl}
	mock.recorder = &MockTaskServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskServiceServer) EXPECT() *MockTaskServiceServerMockRecorder {
	return m.recorder
}

// CreateTaskV1 mocks base method.
func (m *MockTaskServiceServer) CreateTaskV1(arg0 context.Context, arg1 *go_client.CreateTaskRequest) (*go_client.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTaskV1", arg0, arg1)
	ret0, _ := ret[0].(*go_client.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTaskV1 indicates an expected call of CreateTaskV1.
func (mr *MockTaskServiceServerMockRecorder) CreateTaskV1(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTaskV1", reflect.TypeOf((*MockTaskServiceServer)(nil).CreateTaskV1), arg0, arg1)
}

// ListTasksV1 mocks base method.
func (m *MockTaskServiceServer) ListTasksV1(arg0 context.Context, arg1 *go_client.ListTasksRequest) (*go_client.ListTasksResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTasksV1", arg0, arg1)
	ret0, _ := ret[0].(*go_client.ListTasksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTasksV1 indicates an expected call of ListTasksV1.
func (mr *MockTaskServiceServerMockRecorder) ListTasksV1(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTasksV1", reflect.TypeOf((*MockTaskServiceServer)(nil).ListTasksV1), arg0, arg1)
}
