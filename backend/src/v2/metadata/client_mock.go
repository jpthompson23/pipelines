// Code generated by MockGen. DO NOT EDIT.

package metadata

import (
	context "context"
	reflect "reflect"

	pipelinespec "github.com/kubeflow/pipelines/api/v2alpha1/go/pipelinespec"
	objectstore "github.com/kubeflow/pipelines/backend/src/v2/objectstore"
	ml_metadata "github.com/kubeflow/pipelines/third_party/ml-metadata/go/ml_metadata"
	gomock "go.uber.org/mock/gomock"
	structpb "google.golang.org/protobuf/types/known/structpb"
)

// MockClientInterface is a mock of ClientInterface interface.
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
	isgomock struct{}
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface.
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance.
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// CreateExecution mocks base method.
func (m *MockClientInterface) CreateExecution(ctx context.Context, pipeline *Pipeline, config *ExecutionConfig) (*Execution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExecution", ctx, pipeline, config)
	ret0, _ := ret[0].(*Execution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExecution indicates an expected call of CreateExecution.
func (mr *MockClientInterfaceMockRecorder) CreateExecution(ctx, pipeline, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExecution", reflect.TypeOf((*MockClientInterface)(nil).CreateExecution), ctx, pipeline, config)
}

// FindMatchedArtifact mocks base method.
func (m *MockClientInterface) FindMatchedArtifact(ctx context.Context, artifactToMatch *ml_metadata.Artifact, pipelineContextId int64) (*ml_metadata.Artifact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMatchedArtifact", ctx, artifactToMatch, pipelineContextId)
	ret0, _ := ret[0].(*ml_metadata.Artifact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMatchedArtifact indicates an expected call of FindMatchedArtifact.
func (mr *MockClientInterfaceMockRecorder) FindMatchedArtifact(ctx, artifactToMatch, pipelineContextId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMatchedArtifact", reflect.TypeOf((*MockClientInterface)(nil).FindMatchedArtifact), ctx, artifactToMatch, pipelineContextId)
}

// GetArtifactName mocks base method.
func (m *MockClientInterface) GetArtifactName(ctx context.Context, artifactId int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtifactName", ctx, artifactId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtifactName indicates an expected call of GetArtifactName.
func (mr *MockClientInterfaceMockRecorder) GetArtifactName(ctx, artifactId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifactName", reflect.TypeOf((*MockClientInterface)(nil).GetArtifactName), ctx, artifactId)
}

// GetArtifacts mocks base method.
func (m *MockClientInterface) GetArtifacts(ctx context.Context, ids []int64) ([]*ml_metadata.Artifact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtifacts", ctx, ids)
	ret0, _ := ret[0].([]*ml_metadata.Artifact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtifacts indicates an expected call of GetArtifacts.
func (mr *MockClientInterfaceMockRecorder) GetArtifacts(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifacts", reflect.TypeOf((*MockClientInterface)(nil).GetArtifacts), ctx, ids)
}

// GetDAG mocks base method.
func (m *MockClientInterface) GetDAG(ctx context.Context, executionID int64) (*DAG, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDAG", ctx, executionID)
	ret0, _ := ret[0].(*DAG)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDAG indicates an expected call of GetDAG.
func (mr *MockClientInterfaceMockRecorder) GetDAG(ctx, executionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDAG", reflect.TypeOf((*MockClientInterface)(nil).GetDAG), ctx, executionID)
}

// GetEventsByArtifactIDs mocks base method.
func (m *MockClientInterface) GetEventsByArtifactIDs(ctx context.Context, artifactIds []int64) ([]*ml_metadata.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventsByArtifactIDs", ctx, artifactIds)
	ret0, _ := ret[0].([]*ml_metadata.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventsByArtifactIDs indicates an expected call of GetEventsByArtifactIDs.
func (mr *MockClientInterfaceMockRecorder) GetEventsByArtifactIDs(ctx, artifactIds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsByArtifactIDs", reflect.TypeOf((*MockClientInterface)(nil).GetEventsByArtifactIDs), ctx, artifactIds)
}

// GetExecution mocks base method.
func (m *MockClientInterface) GetExecution(ctx context.Context, id int64) (*Execution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecution", ctx, id)
	ret0, _ := ret[0].(*Execution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecution indicates an expected call of GetExecution.
func (mr *MockClientInterfaceMockRecorder) GetExecution(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecution", reflect.TypeOf((*MockClientInterface)(nil).GetExecution), ctx, id)
}

// GetExecutions mocks base method.
func (m *MockClientInterface) GetExecutions(ctx context.Context, ids []int64) ([]*ml_metadata.Execution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecutions", ctx, ids)
	ret0, _ := ret[0].([]*ml_metadata.Execution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecutions indicates an expected call of GetExecutions.
func (mr *MockClientInterfaceMockRecorder) GetExecutions(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutions", reflect.TypeOf((*MockClientInterface)(nil).GetExecutions), ctx, ids)
}

// GetExecutionsInDAG mocks base method.
func (m *MockClientInterface) GetExecutionsInDAG(ctx context.Context, dag *DAG, pipeline *Pipeline, filter bool) (map[string]*Execution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecutionsInDAG", ctx, dag, pipeline, filter)
	ret0, _ := ret[0].(map[string]*Execution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecutionsInDAG indicates an expected call of GetExecutionsInDAG.
func (mr *MockClientInterfaceMockRecorder) GetExecutionsInDAG(ctx, dag, pipeline, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutionsInDAG", reflect.TypeOf((*MockClientInterface)(nil).GetExecutionsInDAG), ctx, dag, pipeline, filter)
}

// GetOrInsertArtifactType mocks base method.
func (m *MockClientInterface) GetOrInsertArtifactType(ctx context.Context, schema string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrInsertArtifactType", ctx, schema)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrInsertArtifactType indicates an expected call of GetOrInsertArtifactType.
func (mr *MockClientInterfaceMockRecorder) GetOrInsertArtifactType(ctx, schema any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrInsertArtifactType", reflect.TypeOf((*MockClientInterface)(nil).GetOrInsertArtifactType), ctx, schema)
}

// GetOutputArtifactsByExecutionId mocks base method.
func (m *MockClientInterface) GetOutputArtifactsByExecutionId(ctx context.Context, executionId int64) (map[string]*OutputArtifact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutputArtifactsByExecutionId", ctx, executionId)
	ret0, _ := ret[0].(map[string]*OutputArtifact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOutputArtifactsByExecutionId indicates an expected call of GetOutputArtifactsByExecutionId.
func (mr *MockClientInterfaceMockRecorder) GetOutputArtifactsByExecutionId(ctx, executionId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutputArtifactsByExecutionId", reflect.TypeOf((*MockClientInterface)(nil).GetOutputArtifactsByExecutionId), ctx, executionId)
}

// GetPipeline mocks base method.
func (m *MockClientInterface) GetPipeline(ctx context.Context, pipelineName, runID, namespace, runResource, pipelineRoot, storeSessionInfo string) (*Pipeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPipeline", ctx, pipelineName, runID, namespace, runResource, pipelineRoot, storeSessionInfo)
	ret0, _ := ret[0].(*Pipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPipeline indicates an expected call of GetPipeline.
func (mr *MockClientInterfaceMockRecorder) GetPipeline(ctx, pipelineName, runID, namespace, runResource, pipelineRoot, storeSessionInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipeline", reflect.TypeOf((*MockClientInterface)(nil).GetPipeline), ctx, pipelineName, runID, namespace, runResource, pipelineRoot, storeSessionInfo)
}

// GetPipelineFromExecution mocks base method.
func (m *MockClientInterface) GetPipelineFromExecution(ctx context.Context, id int64) (*Pipeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPipelineFromExecution", ctx, id)
	ret0, _ := ret[0].(*Pipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPipelineFromExecution indicates an expected call of GetPipelineFromExecution.
func (mr *MockClientInterfaceMockRecorder) GetPipelineFromExecution(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipelineFromExecution", reflect.TypeOf((*MockClientInterface)(nil).GetPipelineFromExecution), ctx, id)
}

// PrePublishExecution mocks base method.
func (m *MockClientInterface) PrePublishExecution(ctx context.Context, execution *Execution, config *ExecutionConfig) (*Execution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrePublishExecution", ctx, execution, config)
	ret0, _ := ret[0].(*Execution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrePublishExecution indicates an expected call of PrePublishExecution.
func (mr *MockClientInterfaceMockRecorder) PrePublishExecution(ctx, execution, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrePublishExecution", reflect.TypeOf((*MockClientInterface)(nil).PrePublishExecution), ctx, execution, config)
}

// PublishExecution mocks base method.
func (m *MockClientInterface) PublishExecution(ctx context.Context, execution *Execution, outputParameters map[string]*structpb.Value, outputArtifacts []*OutputArtifact, state ml_metadata.Execution_State) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishExecution", ctx, execution, outputParameters, outputArtifacts, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishExecution indicates an expected call of PublishExecution.
func (mr *MockClientInterfaceMockRecorder) PublishExecution(ctx, execution, outputParameters, outputArtifacts, state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishExecution", reflect.TypeOf((*MockClientInterface)(nil).PublishExecution), ctx, execution, outputParameters, outputArtifacts, state)
}

// PutDAGExecutionState mocks base method.
func (m *MockClientInterface) PutDAGExecutionState(ctx context.Context, executionID int64, state ml_metadata.Execution_State) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutDAGExecutionState", ctx, executionID, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutDAGExecutionState indicates an expected call of PutDAGExecutionState.
func (mr *MockClientInterfaceMockRecorder) PutDAGExecutionState(ctx, executionID, state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDAGExecutionState", reflect.TypeOf((*MockClientInterface)(nil).PutDAGExecutionState), ctx, executionID, state)
}

// RecordArtifact mocks base method.
func (m *MockClientInterface) RecordArtifact(ctx context.Context, outputName, schema string, runtimeArtifact *pipelinespec.RuntimeArtifact, state ml_metadata.Artifact_State, bucketConfig *objectstore.Config) (*OutputArtifact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordArtifact", ctx, outputName, schema, runtimeArtifact, state, bucketConfig)
	ret0, _ := ret[0].(*OutputArtifact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecordArtifact indicates an expected call of RecordArtifact.
func (mr *MockClientInterfaceMockRecorder) RecordArtifact(ctx, outputName, schema, runtimeArtifact, state, bucketConfig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordArtifact", reflect.TypeOf((*MockClientInterface)(nil).RecordArtifact), ctx, outputName, schema, runtimeArtifact, state, bucketConfig)
}

// UpdateDAGExecutionsState mocks base method.
func (m *MockClientInterface) UpdateDAGExecutionsState(ctx context.Context, dag *DAG, pipeline *Pipeline) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDAGExecutionsState", ctx, dag, pipeline)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDAGExecutionsState indicates an expected call of UpdateDAGExecutionsState.
func (mr *MockClientInterfaceMockRecorder) UpdateDAGExecutionsState(ctx, dag, pipeline any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDAGExecutionsState", reflect.TypeOf((*MockClientInterface)(nil).UpdateDAGExecutionsState), ctx, dag, pipeline)
}
